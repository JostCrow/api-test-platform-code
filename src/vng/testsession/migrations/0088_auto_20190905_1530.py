# Generated by Django 2.2.4 on 2019-09-05 13:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import filer.fields.file
import tinymce.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('testsession', '0087_auto_20190805_1736'),
    ]

    operations = [
        migrations.AlterField(
            model_name='environmentalvariables',
            name='vng_endpoint',
            field=models.ForeignKey(help_text='The service for which this environment variable is defined', on_delete=django.db.models.deletion.CASCADE, to='testsession.VNGEndpoint'),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='docker_url',
            field=models.CharField(blank=True, default=None, help_text='The address under which the Docker containers are deployed', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='port',
            field=models.PositiveIntegerField(default=8080, help_text='The port under which the service has been exposed'),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='session',
            field=models.ForeignKey(help_text='The session to which this exposed URL belongs', on_delete=django.db.models.deletion.CASCADE, to='testsession.Session'),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='subdomain',
            field=models.CharField(help_text='The subdomain under which the service has been exposed', max_length=200, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='test_session',
            field=models.ForeignKey(blank=True, default=None, help_text='The test session to which this exposed URL belongs', null=True, on_delete=django.db.models.deletion.CASCADE, to='testsession.TestSession'),
        ),
        migrations.AlterField(
            model_name='exposedurl',
            name='vng_endpoint',
            field=models.ForeignKey(help_text='The service to which this exposed URL points', on_delete=django.db.models.deletion.CASCADE, to='testsession.VNGEndpoint'),
        ),
        migrations.AlterField(
            model_name='injectheader',
            name='key',
            field=models.CharField(help_text='The name of the HTTP header to be injected', max_length=200),
        ),
        migrations.AlterField(
            model_name='injectheader',
            name='session_type',
            field=models.ForeignKey(help_text='The session type in which this injected header is used', on_delete=django.db.models.deletion.CASCADE, to='testsession.SessionType'),
        ),
        migrations.AlterField(
            model_name='injectheader',
            name='value',
            field=models.TextField(help_text='The value of the HTTP header to be injected'),
        ),
        migrations.AlterField(
            model_name='queryparamsscenario',
            name='expected_value',
            field=models.CharField(default='*', help_text='The expected value of the query parameter', max_length=50),
        ),
        migrations.AlterField(
            model_name='queryparamsscenario',
            name='name',
            field=models.CharField(help_text='The name of the query parameter', max_length=50),
        ),
        migrations.AlterField(
            model_name='queryparamsscenario',
            name='scenario_case',
            field=models.ForeignKey(help_text='The scenario case to which this query parameter test belongs', on_delete=django.db.models.deletion.PROTECT, to='testsession.ScenarioCase'),
        ),
        migrations.AlterField(
            model_name='report',
            name='result',
            field=models.CharField(choices=[('Succesvol', 'success'), ('Niet succesvol', 'failed'), ('Niet uitgevoerd', 'not called')], default='Niet uitgevoerd', help_text='Indicates the whether the call specified in the scenario case has been called yet, and if it has succeeded or not', max_length=20),
        ),
        migrations.AlterField(
            model_name='report',
            name='scenario_case',
            field=models.ForeignKey(help_text='The scenario case to which this report belongs', on_delete=django.db.models.deletion.CASCADE, to='testsession.ScenarioCase'),
        ),
        migrations.AlterField(
            model_name='report',
            name='session_log',
            field=models.ForeignKey(help_text='The session log containing the details of this report', on_delete=django.db.models.deletion.CASCADE, to='testsession.SessionLog'),
        ),
        migrations.AlterField(
            model_name='scenariocase',
            name='collection',
            field=models.ForeignKey(help_text='The collection of scenario cases to which this scenario case belongs', on_delete=django.db.models.deletion.CASCADE, to='testsession.ScenarioCaseCollection'),
        ),
        migrations.AlterField(
            model_name='scenariocase',
            name='http_method',
            field=models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], default='GET', help_text='The HTTP method that must be tested for this scenario case', max_length=20),
        ),
        migrations.AlterField(
            model_name='scenariocasecollection',
            name='name',
            field=models.CharField(help_text='The name of the collection', max_length=100),
        ),
        migrations.AlterField(
            model_name='session',
            name='deploy_percentage',
            field=models.IntegerField(blank=True, default=None, help_text='Indicates what percentage of the deployment is finished', null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='deploy_status',
            field=models.TextField(blank=True, default=None, help_text='Indicates the status of deployment of the session', null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='error_message',
            field=models.TextField(blank=True, default=None, help_text='Contains the error message, if an error occurred during the starting of the session', null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='name',
            field=models.CharField(help_text='The unique name of this session', max_length=30, null=True, unique=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='session',
            name='sandbox',
            field=models.BooleanField(default=False, help_text='If enabled, whenever multiple calls are made to the same path, the result of the call is overridden every time'),
        ),
        migrations.AlterField(
            model_name='session',
            name='session_type',
            field=models.ForeignKey(help_text='The session type of this session', on_delete=django.db.models.deletion.PROTECT, to='testsession.SessionType', verbose_name='Session type'),
        ),
        migrations.AlterField(
            model_name='session',
            name='software_product',
            field=models.CharField(blank=True, help_text='The name of the software tested by this session', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='started',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='The time at which the session was started', verbose_name='Started at'),
        ),
        migrations.AlterField(
            model_name='session',
            name='status',
            field=models.CharField(choices=[('starting', 'starting'), ('running', 'running'), ('shutting down', 'shutting down'), ('stopped', 'stopped'), ('Error deployment', 'error deploy')], default='starting', help_text='Indicates the status of this session', max_length=20),
        ),
        migrations.AlterField(
            model_name='session',
            name='stopped',
            field=models.DateTimeField(blank=True, help_text='The time at which the session was stopped', null=True, verbose_name='Stopped at'),
        ),
        migrations.AlterField(
            model_name='session',
            name='supplier_name',
            field=models.CharField(blank=True, help_text='The name of the supplier of the services', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='user',
            field=models.ForeignKey(help_text='The user that started this session', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='session',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='The universally unique identifier of this session, needed to retrieve the badge', unique=True),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='date',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='The time at which the request was done'),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='request',
            field=models.TextField(blank=True, default=None, help_text='The request that was done', null=True),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='response',
            field=models.TextField(blank=True, default=None, help_text='The response that was returned to the user', null=True),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='response_status',
            field=models.PositiveIntegerField(blank=True, default=None, help_text='The HTTP status code of the response', null=True),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='session',
            field=models.ForeignKey(help_text='The session to which this log belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='testsession.Session'),
        ),
        migrations.AlterField(
            model_name='sessionlog',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='The universally unique identifier of this session log'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='ZGW_images',
            field=models.BooleanField(blank=True, default=False, help_text='If enabled, the default Docker setup for the ZGW project will be used'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='active',
            field=models.BooleanField(blank=True, default=True, help_text='Indicates whether this test scenario can be used via the web interface and the API'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='application',
            field=models.CharField(help_text='The application for which this session type is relevant', max_length=200, null=True, verbose_name='Application'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='authentication',
            field=models.CharField(choices=[('JWT', 'jwt'), ('Authorization header', 'header'), ('No Authorization', 'no auth')], default='No Authorization', help_text='The type of authentication that is used for this session type', max_length=20),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='client_id',
            field=models.TextField(blank=True, default=None, help_text='If the authentication is set to `JWT`, this field will be used to create a JWT', null=True),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='db_data',
            field=models.TextField(blank=True, default=None, help_text='If specified for a session type using Docker, this data will be inserted into the database', null=True),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='description',
            field=tinymce.models.HTMLField(help_text='The description of the session type'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='header',
            field=models.TextField(blank=True, default=None, help_text='If the authentication is set to `Header`, the value of this field will be used to authenticate with', null=True),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='name',
            field=models.CharField(help_text='The name of this session type', max_length=200, unique=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='secret',
            field=models.TextField(blank=True, default=None, help_text='If the authentication is set to `JWT`, this field will be used to create a JWT', null=True),
        ),
        migrations.AlterField(
            model_name='sessiontype',
            name='version',
            field=models.CharField(help_text='The version of this session type', max_length=200, null=True, verbose_name='Version'),
        ),
        migrations.AlterField(
            model_name='testsession',
            name='json_result',
            field=models.TextField(blank=True, default=None, help_text='The JSON log generated by Newman', null=True),
        ),
        migrations.AlterField(
            model_name='testsession',
            name='test_result',
            field=models.FileField(blank=True, default=None, help_text='The HTML log generated by Newman', null=True, upload_to='', verbose_name='/files/log'),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='docker_image',
            field=models.CharField(blank=True, default=None, help_text='The name of the Docker image that must be pulled to create a container', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='name',
            field=models.CharField(help_text='The name of the service', max_length=200, validators=[django.core.validators.RegexValidator(code='Invalid_name', message='The name cannot contain spaces', regex='^[^ ]*$')]),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='port',
            field=models.PositiveIntegerField(blank=True, default=8080, help_text='Specifies on which port endpoints for this service will be exposed'),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='scenario_collection',
            field=models.ForeignKey(blank=True, default=None, help_text='The collection of scenario cases that must be tested for this service', null=True, on_delete=django.db.models.deletion.SET_NULL, to='testsession.ScenarioCaseCollection'),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='session_type',
            field=models.ForeignKey(help_text='The session type to which this service belongs', on_delete=django.db.models.deletion.PROTECT, to='testsession.SessionType'),
        ),
        migrations.AlterField(
            model_name='vngendpoint',
            name='test_file',
            field=filer.fields.file.FilerFileField(blank=True, default=None, help_text='A Postman test collection that will be ran against this service upon stopping the test session', null=True, on_delete=django.db.models.deletion.SET_NULL, to='filer.File'),
        ),
    ]
